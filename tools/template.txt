<?php

namespace Arris\Toolkit;

/**
 * Provides mappings of file extensions to mimetypes.
 * API-compatible with Guzzle\Http\Mimetypes (http://guzzlephp.org).
 * @link https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x/docs/conf/mime.types
 */
class MimeTypes
{
    /**
     * An associative array with extension => mimetype mappings.
     *
     * Generated from source on %%generate_datetime%%
     */
    protected static $mime_types = %%array_mime_types%%
    ;

    public static function getMimeTypes():array
    {
        return self::$mime_types;
    }

    public static function getExtension(string $mime_type):string
    {
        $mime_type = strtolower(trim($mime_type));

        $found = array_search($mime_type, self::$mime_types);
        return ($found === false) ? '' : $found;
    }

    public static function fromExtension(string $extension):string
    {
        $extension = self::normalize($extension);

        return
            array_key_exists($extension, self::$mime_types)
                ? self::$mime_types[$extension]
                : '';
    }

    public static function fromFilename(string $filename):string
    {
        return self::fromExtension( pathinfo($filename, PATHINFO_EXTENSION));
    }

    /**
     * Normalize the input string using lowercase/trim.
     *
     * @param string $input - The string to normalize.
     * @return string - The normalized string.
     */
    private static function normalize(string $input):string
    {
        return trim(
            strtolower(
                trim($input)),
            '.'
        );
    }

}

# -eof-
